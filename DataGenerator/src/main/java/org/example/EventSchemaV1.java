/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EventSchemaV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6220337494775180408L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventSchemaV1\",\"namespace\":\"org.example\",\"fields\":[{\"name\":\"uuid\",\"type\":\"string\"},{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"user_agent\",\"type\":\"string\"},{\"name\":\"events\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"event\",\"fields\":[{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EventSchemaV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EventSchemaV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EventSchemaV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EventSchemaV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EventSchemaV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EventSchemaV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EventSchemaV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EventSchemaV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EventSchemaV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence uuid;
  private java.lang.CharSequence ip;
  private java.lang.CharSequence user_agent;
  private java.util.List<org.example.event> events;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EventSchemaV1() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param ip The new value for ip
   * @param user_agent The new value for user_agent
   * @param events The new value for events
   */
  public EventSchemaV1(java.lang.CharSequence uuid, java.lang.CharSequence ip, java.lang.CharSequence user_agent, java.util.List<org.example.event> events) {
    this.uuid = uuid;
    this.ip = ip;
    this.user_agent = user_agent;
    this.events = events;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return ip;
    case 2: return user_agent;
    case 3: return events;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.CharSequence)value$; break;
    case 1: ip = (java.lang.CharSequence)value$; break;
    case 2: user_agent = (java.lang.CharSequence)value$; break;
    case 3: events = (java.util.List<org.example.event>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.CharSequence getUuid() {
    return uuid;
  }


  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.CharSequence value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'ip' field.
   * @return The value of the 'ip' field.
   */
  public java.lang.CharSequence getIp() {
    return ip;
  }


  /**
   * Sets the value of the 'ip' field.
   * @param value the value to set.
   */
  public void setIp(java.lang.CharSequence value) {
    this.ip = value;
  }

  /**
   * Gets the value of the 'user_agent' field.
   * @return The value of the 'user_agent' field.
   */
  public java.lang.CharSequence getUserAgent() {
    return user_agent;
  }


  /**
   * Sets the value of the 'user_agent' field.
   * @param value the value to set.
   */
  public void setUserAgent(java.lang.CharSequence value) {
    this.user_agent = value;
  }

  /**
   * Gets the value of the 'events' field.
   * @return The value of the 'events' field.
   */
  public java.util.List<org.example.event> getEvents() {
    return events;
  }


  /**
   * Sets the value of the 'events' field.
   * @param value the value to set.
   */
  public void setEvents(java.util.List<org.example.event> value) {
    this.events = value;
  }

  /**
   * Creates a new EventSchemaV1 RecordBuilder.
   * @return A new EventSchemaV1 RecordBuilder
   */
  public static org.example.EventSchemaV1.Builder newBuilder() {
    return new org.example.EventSchemaV1.Builder();
  }

  /**
   * Creates a new EventSchemaV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventSchemaV1 RecordBuilder
   */
  public static org.example.EventSchemaV1.Builder newBuilder(org.example.EventSchemaV1.Builder other) {
    if (other == null) {
      return new org.example.EventSchemaV1.Builder();
    } else {
      return new org.example.EventSchemaV1.Builder(other);
    }
  }

  /**
   * Creates a new EventSchemaV1 RecordBuilder by copying an existing EventSchemaV1 instance.
   * @param other The existing instance to copy.
   * @return A new EventSchemaV1 RecordBuilder
   */
  public static org.example.EventSchemaV1.Builder newBuilder(org.example.EventSchemaV1 other) {
    if (other == null) {
      return new org.example.EventSchemaV1.Builder();
    } else {
      return new org.example.EventSchemaV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for EventSchemaV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventSchemaV1>
    implements org.apache.avro.data.RecordBuilder<EventSchemaV1> {

    private java.lang.CharSequence uuid;
    private java.lang.CharSequence ip;
    private java.lang.CharSequence user_agent;
    private java.util.List<org.example.event> events;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.EventSchemaV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.ip)) {
        this.ip = data().deepCopy(fields()[1].schema(), other.ip);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.user_agent)) {
        this.user_agent = data().deepCopy(fields()[2].schema(), other.user_agent);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.events)) {
        this.events = data().deepCopy(fields()[3].schema(), other.events);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing EventSchemaV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.EventSchemaV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ip)) {
        this.ip = data().deepCopy(fields()[1].schema(), other.ip);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user_agent)) {
        this.user_agent = data().deepCopy(fields()[2].schema(), other.user_agent);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.events)) {
        this.events = data().deepCopy(fields()[3].schema(), other.events);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.CharSequence getUuid() {
      return uuid;
    }


    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public org.example.EventSchemaV1.Builder setUuid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public org.example.EventSchemaV1.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ip' field.
      * @return The value.
      */
    public java.lang.CharSequence getIp() {
      return ip;
    }


    /**
      * Sets the value of the 'ip' field.
      * @param value The value of 'ip'.
      * @return This builder.
      */
    public org.example.EventSchemaV1.Builder setIp(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ip = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ip' field has been set.
      * @return True if the 'ip' field has been set, false otherwise.
      */
    public boolean hasIp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ip' field.
      * @return This builder.
      */
    public org.example.EventSchemaV1.Builder clearIp() {
      ip = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_agent' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserAgent() {
      return user_agent;
    }


    /**
      * Sets the value of the 'user_agent' field.
      * @param value The value of 'user_agent'.
      * @return This builder.
      */
    public org.example.EventSchemaV1.Builder setUserAgent(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.user_agent = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'user_agent' field has been set.
      * @return True if the 'user_agent' field has been set, false otherwise.
      */
    public boolean hasUserAgent() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'user_agent' field.
      * @return This builder.
      */
    public org.example.EventSchemaV1.Builder clearUserAgent() {
      user_agent = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'events' field.
      * @return The value.
      */
    public java.util.List<org.example.event> getEvents() {
      return events;
    }


    /**
      * Sets the value of the 'events' field.
      * @param value The value of 'events'.
      * @return This builder.
      */
    public org.example.EventSchemaV1.Builder setEvents(java.util.List<org.example.event> value) {
      validate(fields()[3], value);
      this.events = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'events' field has been set.
      * @return True if the 'events' field has been set, false otherwise.
      */
    public boolean hasEvents() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'events' field.
      * @return This builder.
      */
    public org.example.EventSchemaV1.Builder clearEvents() {
      events = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EventSchemaV1 build() {
      try {
        EventSchemaV1 record = new EventSchemaV1();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ip = fieldSetFlags()[1] ? this.ip : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.user_agent = fieldSetFlags()[2] ? this.user_agent : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.events = fieldSetFlags()[3] ? this.events : (java.util.List<org.example.event>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EventSchemaV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<EventSchemaV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EventSchemaV1>
    READER$ = (org.apache.avro.io.DatumReader<EventSchemaV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.uuid);

    out.writeString(this.ip);

    out.writeString(this.user_agent);

    long size0 = this.events.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (org.example.event e0: this.events) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.uuid = in.readString(this.uuid instanceof Utf8 ? (Utf8)this.uuid : null);

      this.ip = in.readString(this.ip instanceof Utf8 ? (Utf8)this.ip : null);

      this.user_agent = in.readString(this.user_agent instanceof Utf8 ? (Utf8)this.user_agent : null);

      long size0 = in.readArrayStart();
      java.util.List<org.example.event> a0 = this.events;
      if (a0 == null) {
        a0 = new SpecificData.Array<org.example.event>((int)size0, SCHEMA$.getField("events").schema());
        this.events = a0;
      } else a0.clear();
      SpecificData.Array<org.example.event> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<org.example.event>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          org.example.event e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new org.example.event();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.uuid = in.readString(this.uuid instanceof Utf8 ? (Utf8)this.uuid : null);
          break;

        case 1:
          this.ip = in.readString(this.ip instanceof Utf8 ? (Utf8)this.ip : null);
          break;

        case 2:
          this.user_agent = in.readString(this.user_agent instanceof Utf8 ? (Utf8)this.user_agent : null);
          break;

        case 3:
          long size0 = in.readArrayStart();
          java.util.List<org.example.event> a0 = this.events;
          if (a0 == null) {
            a0 = new SpecificData.Array<org.example.event>((int)size0, SCHEMA$.getField("events").schema());
            this.events = a0;
          } else a0.clear();
          SpecificData.Array<org.example.event> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<org.example.event>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              org.example.event e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new org.example.event();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










